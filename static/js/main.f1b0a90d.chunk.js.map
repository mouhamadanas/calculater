{"version":3,"sources":["component/cont.js","App.js","reportWebVitals.js","index.js"],"names":["old","ops","ops1","isFloat","n","Number","Cont","useState","val","setVal","setNumber","num","prev","operation","toFixed","parseFloat","parseInt","value","readOnly","className","onClick","prevVal","document","title","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sMAEIA,EAAM,EAAGC,EAAM,EAAGC,EAAO,EAM7B,SAASC,EAAQC,GACb,OAAOC,OAAOD,KAAOA,GAAKA,EAAI,IAAM,EASxC,IAwFeE,EAxFF,WACT,MAAsBC,mBAAS,CAAC,MAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KAIMC,EAAY,SAACC,GACf,IAAIC,EAAOJ,EAEA,GAAPA,GAAqB,IAATN,GACZA,EAAO,EACPO,EAAOE,IAIPF,EADAG,GAAcD,IAQhBE,EAAY,SAACF,GAGH,IAARV,GACAD,EAAMQ,EACNP,EAAMU,EACNT,EAAOS,GAEM,IAARV,GAELA,EAAMU,EACNT,EAAOS,EACPF,EAAON,EAHPH,GAAOQ,GAGgBR,EAAIc,QAAQ,IAAOd,IAC3B,IAARC,GAEPA,EAAMU,EACNT,EAAOS,EACPF,EAAON,EAHPH,GAAOQ,GAGgBR,EAAIc,QAAQ,IAAOd,IAC3B,IAARC,GACPD,EAAMK,OAAOL,GAAOK,OAAOG,GAC3BP,EAAMU,EACNT,EAAOS,EACPF,EAAON,EAAQH,GAAQA,EAAIc,QAAQ,IAAOd,IAE3B,IAARC,IAGHD,EADAG,EAAQE,OAAOL,KAASG,EAAQE,OAAOG,IACjCO,WAAWf,GAAOe,WAAWP,GAE7BQ,SAAShB,GAAOgB,SAASR,GACnCP,EAAMU,EACNT,EAAOS,EACPF,EAAON,EAAQH,GAAQA,EAAIc,QAAQ,IAAOd,IAElC,IAARW,IACAV,EAAM,EACNC,EAAOS,IAGf,OACI,gCACI,uBAAOM,MAAOT,EAAKU,UAAQ,EAACC,UAAU,WACtC,sBAAKA,UAAU,UAAf,UACI,wBAAQC,QAAS,WAAQX,EAAO,GAAIT,EAAM,EAAGC,EAAM,GAAnD,gBACA,wBAAQmB,QAAS,kBAAMX,GAAO,SAAAY,GAAO,OAAK,EAAIA,MAA9C,iBACA,wBAAQD,QAAS,kBAAMX,GAAO,SAAAG,GAAI,OAAIA,EAAO,QAA7C,eACA,wBAAQQ,QAAS,kBAAMP,EAAU,IAAjC,eACA,wBAAQO,QAAS,WAAQV,EAAU,MAAnC,eACA,wBAAQU,QAAS,kBAAMV,EAAU,MAAjC,eACA,wBAAQU,QAAS,kBAAMV,EAAU,MAAjC,eACA,wBAAQU,QAAS,kBAAMP,EAAU,IAAjC,eACA,wBAAQO,QAAS,kBAAMV,EAAU,MAAjC,eACA,wBAAQU,QAAS,kBAAMV,EAAU,MAAjC,eACA,wBAAQU,QAAS,kBAAMV,EAAU,MAAjC,eACA,wBAAQU,QAAS,kBAAMP,EAAU,IAAjC,eACA,wBAAQO,QAAS,kBAAMV,EAAU,MAAjC,eACA,wBAAQU,QAAS,kBAAMV,EAAU,MAAjC,eACA,wBAAQU,QAAS,kBAAMV,EAAU,MAAjC,eACA,wBAAQU,QAAS,kBAAMP,EAAU,IAAjC,eACA,wBAAQO,QAAS,kBAAMV,EAAU,IAAjC,eACA,wBAAQU,QAAS,kBAAMV,EAAU,MAAjC,eACA,wBAAQU,QAAS,kBAAMP,EAAU,IAAjC,sBCjGhBS,SAASC,MAAQ,aAUFC,MARf,WACE,OACE,qBAAKL,UAAU,MAAf,SACE,cAAC,EAAD,OCISM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFd,SAASe,eAAe,SAM1BZ,K","file":"static/js/main.f1b0a90d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport '../App.css'\r\nlet old = 0, ops = 0, ops1 = 0\r\n\r\nfunction isInt(n) {\r\n    return Number(n) === n && n % 1 === 0;\r\n}\r\n\r\nfunction isFloat(n) {\r\n    return Number(n) === n && n % 1 !== 0;\r\n}\r\n\r\nfunction strip(number) {\r\n    return (parseFloat(number).toPrecision(12));\r\n}\r\n\r\n\r\n\r\nconst Cont = () => {\r\n    const [val, setVal] = useState(['0'])\r\n\r\n\r\n\r\n    const setNumber = (num) => {\r\n        let prev = val\r\n        // eslint-disable-next-line eqeqeq\r\n        if (val == 0 || ops1 !== 0) {\r\n            ops1 = 0\r\n            setVal(num)\r\n        }\r\n        else {\r\n            prev = prev + num\r\n            setVal(prev)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const operation = (num) => {\r\n\r\n\r\n        if (ops === 0) {\r\n            old = val\r\n            ops = num\r\n            ops1 = num\r\n        }\r\n        else if (ops === 1) {\r\n            old /= val\r\n            ops = num\r\n            ops1 = num\r\n            setVal(isFloat(old) ? (old.toFixed(10)) : old)\r\n        } else if (ops === 2) {\r\n            old *= val\r\n            ops = num\r\n            ops1 = num\r\n            setVal(isFloat(old) ? (old.toFixed(10)) : old)\r\n        } else if (ops === 3) {\r\n            old = Number(old) - Number(val)\r\n            ops = num\r\n            ops1 = num\r\n            setVal(isFloat(old) ? (old.toFixed(10)) : old)\r\n\r\n        } else if (ops === 4) {\r\n\r\n            if (isFloat(Number(old)) || isFloat(Number(val)))\r\n                old = parseFloat(old) + parseFloat(val)\r\n            else\r\n                old = parseInt(old) + parseInt(val)\r\n            ops = num\r\n            ops1 = num\r\n            setVal(isFloat(old) ? (old.toFixed(10)) : old)\r\n        }\r\n        if (num === 5) {\r\n            ops = 0\r\n            ops1 = num\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <input value={val} readOnly className='result' />\r\n            <div className='btnCont'>\r\n                <button onClick={() => { setVal(0); old = 0; ops = 0 }}>AC</button>\r\n                <button onClick={() => setVal(prevVal => -1 * prevVal)}>+/-</button>\r\n                <button onClick={() => setVal(prev => prev / 100)}>%</button>\r\n                <button onClick={() => operation(1)}>/</button>\r\n                <button onClick={() => { setNumber('7') }}>7</button>\r\n                <button onClick={() => setNumber('8')}>8</button>\r\n                <button onClick={() => setNumber('9')}>9</button>\r\n                <button onClick={() => operation(2)}>x</button>\r\n                <button onClick={() => setNumber('4')}>4</button>\r\n                <button onClick={() => setNumber('5')}>5</button>\r\n                <button onClick={() => setNumber('6')}>6</button>\r\n                <button onClick={() => operation(3)}>-</button>\r\n                <button onClick={() => setNumber('1')}>1</button>\r\n                <button onClick={() => setNumber('2')}>2</button>\r\n                <button onClick={() => setNumber('3')}>3</button>\r\n                <button onClick={() => operation(4)}>+</button>\r\n                <button onClick={() => setNumber(0)}>0</button>\r\n                <button onClick={() => setNumber('.')}>.</button>\r\n                <button onClick={() => operation(5)}>=</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cont\r\n","\nimport Cont from './component/cont';\nimport './App.css';\ndocument.title = \"calculater\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Cont />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}